// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth models for NextAuth Prisma Adapter
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // App-specific
  wallets       Wallet[]
  submissions   Submission[]
  projects      StudioProject[]
  analyses      PlaylistAnalysis[]
  playlistsOwned Playlist[] @relation("OwnedPlaylists")

  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core domain models
model Playlist {
  id                 String   @id @default(cuid())
  title              String
  description        String?
  spotifyPlaylistId  String   @unique
  ownerUserId        String? // optional admin-owned or user-owned
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  owner    User?    @relation(name: "OwnedPlaylists", fields: [ownerUserId], references: [id])
  analyses PlaylistAnalysis[]
  submissions Submission[]
}

model PlaylistAnalysis {
  id             String   @id @default(cuid())
  playlistId     String
  userId         String?
  analyzedAt     DateTime @default(now())
  // Basic heuristics captured from Spotify
  trackCount     Int
  averagePopularity Int
  addedWithin30Days Int
  followersEstimate Int?
  suspectedBotsScore Int  // 0-100
  notes          String?

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id])
}

model Submission {
  id           String   @id @default(cuid())
  userId       String
  playlistId   String
  trackUrl     String
  status       SubmissionStatus @default(PENDING)
  tokenCost    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

enum SubmissionStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0) // token balance
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  amount      Int // positive for top-up, negative for spend
  reason      String
  createdAt   DateTime @default(now())
  stripeId    String?

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model StudioProject {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets  AudioAsset[]
}

model AudioAsset {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  storagePath  String   // path or URL
  durationSec  Float?
  sampleRateHz Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project StudioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
